#!/usr/bin/env perl
#   Copyright (c) MediaTek USA Inc., 2022
#
#   This program is free software;  you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY;  without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program;  if not, see
#   <http://www.gnu.org/licenses/>.
#
#
# gitversion --p4 --md5 pathname OR
# gitversion --compare old_version new_version pathname
#
#   If the '--p4' flag is used:
#     we assume that the GIT repo is cloned from Perforce - and look for
#     the line in the generated commit log message which tells us the perforce
#     changelist ID that we actually want.

#   This is a sample script which uses git commands to determine
#   the version of the filename parameter.
#   Version information (if present) is used during ".info" file merging
#   to verify that the data the user is attempting to merge is for the same
#   source code/same version.
#   If the version is not the same - then line numbers, etc. may be different
#   and soem very strange errors may occur.

use POSIX qw(strftime);
use Getopt::Long;
use File::Spec;
use Cwd qw(abs_path);
use strict;

sub get_modify_time($)
{
    my $filename = shift;
    my @stat     = stat $filename;
    my $tz       = strftime("%z", localtime($stat[9]));
    $tz =~ s/([0-9][0-9])$/:\1/;
    return strftime("%Y-%m-%dT%H:%M:%S", localtime($stat[9])) . $tz;
}

sub usage
{
    print(STDERR "usage: $0 --compare old_version new_version filename OR\n" .
          "       $0 [--md5] [--p4] filename\n");
}

my $compare;
my $use_md5;    # if set, append md5 checksum to the P4 version string
my $mapp4;
if (!GetOptions("--compare" => \$compare,
                "--md5"     => \$use_md5,
                "--p4"      => \$mapp4) ||
    ($compare && scalar(@ARGV) != 3)
) {

    usage();
    exit(1);
}

my $filename = $ARGV[$compare ? 2 : 0];

if ($compare) {
    my ($old, $new) = @ARGV;
    exit($old ne $new);    # for the moment, just look for exact match
}

die("Error: $filename does not exist")
    unless (-e $filename);
my $pathname = abs_path($filename);
my $null     = File::Spec->devnull();
if ($use_md5) {
    $use_md5 = `md5sum $pathname 2>$null`;
    $use_md5 =~ /^(\S+)/;
    $use_md5 = $1;
}

my $version;
if (0 == system("git rev-parse --show-toplevel >$null 2>&1")) {
    # in a git repo
    my $log = `git log --oneline -1 $pathname 2>$null`;
    if (0 == $? &&
        $log =~ /^(\S+) /) {
        $version = $1;
        if ($mapp4) {
            if (open(GITLOG, '-|', "git show -s $version")) {
                while (my $l = <GITLOG>) {
                    # p4sync puts special comment in commit log.
                    #  pull the CL out of that.
                    if ($l =~ /git-p4:.+change = ([0-9]+)/) {
                        $version = "CL $1";
                        last;
                    }
                }
            } else {
                die("unable to execute 'git show -s $version': $!");
            }
            close(GITLOG) or die("unable to close");
        } else {
            $version = "SHA $version";
        }
        my $diff = `git diff $pathname 2>$null`;
        if ('' ne $diff) {
            $version .= ' edited ' . get_modify_time($pathname);
            $version .= " md5:$use_md5"
                if $use_md5;
        }
    }
}
if (!$version) {
    # not in P4 - just print the modify time, so we have a prayer of
    #  noticing file differences
    $version = get_modify_time($pathname);
    $version .= " md5:$use_md5"
        if ($use_md5);
}
print($version . "\n");

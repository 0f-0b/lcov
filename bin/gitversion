#!/usr/bin/env perl
#   Copyright (c) MediaTek USA Inc., 2022
#
#   This program is free software;  you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY;  without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program;  if not, see
#   <http://www.gnu.org/licenses/>.
#
#
# gitversion [--p4] [--md5] [--prefix path] pathname OR
# gitversion [--p4] [--md5] [--prefix path] --compare old_version new_version pathname
#
#   If the '--p4' flag is used:
#     we assume that the GIT repo is cloned from Perforce - and look for
#     the line in the generated commit log message which tells us the perforce
#     changelist ID that we actually want.
#   If specified, 'path' is prependied to 'pathname' (as 'path/pathname')
#     before processing.

#   This is a sample script which uses git commands to determine
#   the version of the filename parameter.
#   Version information (if present) is used during ".info" file merging
#   to verify that the data the user is attempting to merge is for the same
#   source code/same version.
#   If the version is not the same - then line numbers, etc. may be different
#   and some very strange errors may occur.

use POSIX qw(strftime);
use Getopt::Long;
use File::Spec;
use Cwd qw(abs_path);
use File::Basename qw(dirname basename);
use strict;

sub get_modify_time($)
{
    my $filename = shift;
    my @stat     = stat $filename;
    my $tz       = strftime("%z", localtime($stat[9]));
    $tz =~ s/([0-9][0-9])$/:\1/;
    return strftime("%Y-%m-%dT%H:%M:%S", localtime($stat[9])) . $tz;
}

sub usage
{
    print(STDERR "usage: $0 --compare old_version new_version filename OR\n" .
         "       $0 [--md5] [--p4] [--prefix path] [--allow-missing] filename\n"
    );
}

my $compare;
my $use_md5;    # if set, append md5 checksum to the P4 version string
my $mapp4;
my $prefix;
my $allow_missing;
my $help;
if (!GetOptions("--compare"       => \$compare,
                "--md5"           => \$use_md5,
                "--p4"            => \$mapp4,
                '--prefix:s'      => \$prefix,
                '--allow-missing' => \$allow_missing,
                '--help'          => \$help) ||
    $help ||
    ($compare && scalar(@ARGV) != 3) ||
    (!$compare && scalar(@ARGV) != 1)
) {

    usage();
    exit(defined($help) ? 0 : 1);
}

my $filename = $ARGV[$compare ? 2 : 0];
if (!File::Spec->file_name_is_absolute($filename) &&
    defined($prefix)) {
    $filename = File::Spec->catfile($prefix, $filename);
}

if ($compare) {
    my ($old, $new) = @ARGV;
    if ($use_md5 &&
        (   $old !~ /^SHA/ ||
            ($mapp4 &&
                $old !~ /^CL/)) &&
        $old =~ / md5:(.+)$/
    ) {
        my $o = $1;
        if ($new =~ / md5:(.+)$/) {
            exit($o ne $1);
        }
        # otherwise:  'new' was not an MD5 signature - so fall through to exact match
    }
    exit($old ne $new);    # just look for exact match
}

unless (-e $filename) {
    if ($allow_missing) {
        print("\n");       # empty string
        exit 0;
    }
    die("Error: $filename does not exist - perhaps you need the '--allow-missing' flag"
    );
}
my $pathname = abs_path($filename);
my $null     = File::Spec->devnull();

sub compute_md5
{
    my $md5 = `md5sum $pathname 2>$null`;
    $md5 =~ /^(\S+)/;
    return $1;
}

my $dirname = dirname($pathname);
my $file    = basename($pathname);
chdir($dirname) or die("unable to 'cd $dirname': $!");

my $version;
if (0 == system("git rev-parse --show-toplevel >$null 2>&1")) {
    # in a git repo - use full SHA.
    my $log = `git log --no-abbrev --oneline -1 $file 2>$null`;
    if (0 == $? &&
        $log =~ /^(\S+) /) {
        $version = $1;
        if ($mapp4) {
            if (open(GITLOG, '-|', "git show -s $version")) {
                while (my $l = <GITLOG>) {
                    # p4sync puts special comment in commit log.
                    #  pull the CL out of that.
                    if ($l =~ /git-p4:.+change = ([0-9]+)/) {
                        $version = "CL $1";
                        last;
                    }
                }
            } else {
                die("unable to execute 'git show -s $version': $!");
            }
            close(GITLOG) or die("unable to close");
            if (0 != $?) {
                $? & 0x7F &
                    die("git show died from signal ", ($? & 0x7F), "\n");
                die("git show exited with error ", ($? >> 8), "\n");
            }

        } else {
            $version = "SHA $version";
        }
        my $diff = `git diff $file 2>$null`;
        if ('' ne $diff) {
            $version .= ' edited ' . get_modify_time($file);
            $version .= ' md5:' . compute_md5()
                if $use_md5;
        }
    }
}
if (!$version) {
    # not in P4 - just print the modify time, so we have a prayer of
    #  noticing file differences
    $version = get_modify_time($file);
    $version .= ' md5:' . compute_md5()
        if ($use_md5);
}
print($version . "\n");
